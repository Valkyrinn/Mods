package mods.horsehud.client.gui.recipes;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

import mods.horsehud.HorseHUD;
import mods.horsehud.api.IDisplayRecipe;
import mods.horsehud.client.ConfigHandler;
import mods.horsehud.client.gui.itembox.GuiItemDisplay.ItemContainer;
import mods.horsehud.client.gui.itembox.GuiItemPanel.ItemSlot;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.resources.I18n;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.item.crafting.FurnaceRecipes;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.item.crafting.RecipeBookCloning;
import net.minecraft.item.crafting.RecipeFireworks;
import net.minecraft.item.crafting.RecipesArmorDyes;
import net.minecraft.item.crafting.RecipesMapCloning;
import net.minecraft.item.crafting.ShapedRecipes;
import net.minecraft.item.crafting.ShapelessRecipes;
import net.minecraft.tileentity.TileEntityFurnace;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.oredict.ShapedOreRecipe;
import net.minecraftforge.oredict.ShapelessOreRecipe;
import cpw.mods.fml.common.ObfuscationReflectionHelper;

public class RecipeList {
//	public static final String CRAFTING = "crafting", SMELTING = "smelting";
	private List<IDisplayRecipe> recipeList = new ArrayList();
	protected static RecipeList instance = null;

	// Calls the recipe list generated by the CraftingManager, and defers each to a custom IDisplayRecipe
	// Then add all those recipes to the recipeList
	public RecipeList() {
		this.build();
	}
	
	public static RecipeList instance() {
		if (instance == null) instance = new RecipeList();
		return instance;
	}
	
	public void build() {
		List crafting = CraftingManager.getInstance().getRecipeList();
		for (Object recipe : crafting) {
			if (recipe instanceof IRecipe) {
				if (recipe instanceof ShapedOreRecipe)
					recipeList.add(new RecipeCrafting((ShapedOreRecipe)recipe));
				else if (recipe instanceof ShapedRecipes)
					recipeList.add(new RecipeCrafting((ShapedRecipes)recipe));
				else if (recipe instanceof ShapelessRecipes)
					recipeList.add(new RecipeCrafting((ShapelessRecipes)recipe));
				else if (recipe instanceof ShapelessOreRecipe)
					recipeList.add(new RecipeCrafting((ShapelessOreRecipe)recipe));
//				else if (recipe instanceof RecipesArmorDyes)
//					recipeList.add(recipe((RecipesArmorDyes)recipe));
//				else if (recipe instanceof RecipeFireworks)
//					recipeList.add(recipe((RecipeFireworks)recipe));
//				else if (recipe instanceof RecipeBookCloning)
//					recipeList.add(recipe((RecipeBookCloning)recipe));
//				else if (recipe instanceof RecipesMapCloning)
//					recipeList.add(recipe((RecipesMapCloning)recipe));
				else
					HorseHUD.log.info("Unhandled IRecipe type! " + recipe.toString());
			} else
				System.out.println("Unhandled Recipe type! " + recipe.toString());
		}
		
		ArrayList<ItemStack> fuel = new ArrayList();
		for (List<ItemStack> list : ConfigHandler.instance().modItemsLists.values())
			for (ItemStack is : list)
				if (TileEntityFurnace.isItemFuel(is)) fuel.add(is);

		Map<ItemStack, ItemStack> smelting = FurnaceRecipes.smelting().getSmeltingList();
		for (Map.Entry<ItemStack, ItemStack> entry : smelting.entrySet()) {
			recipeList.add(new RecipeSmelting(entry.getKey(), entry.getValue(), fuel));
		}
	}
	
	public void register(IDisplayRecipe recipe) {
		recipeList.add(recipe);
	}

//	// Returns either a 3x3 or a 2x2 shaped crafting recipe
//	private CustomRecipe recipe(ShapedOreRecipe recipe) {
//		CustomRecipe returnRecipe;
//
//		Object[] input = recipe.getInput();
//		int width = ObfuscationReflectionHelper.getPrivateValue(ShapedOreRecipe.class, recipe, "width");
//		int height = ObfuscationReflectionHelper.getPrivateValue(ShapedOreRecipe.class, recipe, "height");
//		int size = (width <= 2 && height <= 2)? 2 : 3;
//		ItemStack[][] isInput = new ItemStack[size][size];
//
//		for (int i=0; i<height; i++) {
//			for (int j=0; j<width; j++) {
//				int k = i*width + j;
//				if (k < input.length){
//					if (input[k] instanceof ArrayList) {
//						isInput[i][j] = ((ArrayList<ItemStack>)input[k]).get(0);
////						System.out.println("Shaped Ore Recipe for " + recipe.getRecipeOutput().getDisplayName() + ": " + (isInput[i][j] != null?isInput[i][j].getDisplayName():"null"));
//					} else if (input[k] instanceof ItemStack)
//						isInput[i][j] = (ItemStack)input[k];
//					else
//						isInput[i][j] = null;
//				} else
//					isInput[i][j] = null;
//			}
//		}
//		returnRecipe = new CustomRecipe(isInput, recipe.getRecipeOutput(), false);
//
//		return returnRecipe;
//	}
//	
//	// Returns either a 3x3 or a 2x2 shapeless crafting recipe
//	private CustomRecipe recipe(ShapelessOreRecipe recipe) {
//		CustomRecipe returnRecipe;
//		
//		ArrayList<Object> input = recipe.getInput();
//		int size = (input.size()>4)?3:2;
//		ItemStack[][] isInput = new ItemStack[size][size];
//		
//		for (int i=0; i<size; i++) {
//			for (int j=0; j<size; j++) {
//				int k = i*size + j;
//				if (k < input.size()) {
//					if (input.get(k) instanceof ItemStack)
//						isInput[i][j] = (ItemStack)input.get(k);
//					else if (input.get(k) instanceof ArrayList) {
//						isInput[i][j] = ((ArrayList<ItemStack>)input.get(k)).get(0);
////						System.out.println("Shapeless Ore Recipe for " + recipe.getRecipeOutput().getDisplayName() + ": " + (isInput[i][j] != null?isInput[i][j].getDisplayName():"null"));
//					}
//				} else
//					isInput[i][j] = null;
//			}
//		}
//		returnRecipe = new CustomRecipe(isInput, recipe.getRecipeOutput(), true);
//
//		return returnRecipe;
//	}
//
//	private CustomRecipe recipe(ShapedRecipes recipe) {
//		CustomRecipe returnRecipe;
//
//		ItemStack[] items = ((ShapedRecipes)recipe).recipeItems;
//		int size = 3;
////		if (items.length <= 4) size = 2;
//		int width = ((ShapedRecipes)recipe).recipeWidth;
//		int height = ((ShapedRecipes)recipe).recipeHeight;
//		if (width <= 2 && height <= 2) size = 2;
//		ItemStack[][] isInput = new ItemStack[size][size];
//		for (int i=0; i<height; i++) {
//			for (int j=0; j<width; j++) {
//				int k = i*width + j;
//				if (k < items.length) {
//					isInput[i][j] = items[k];
//				} else
//					isInput[i][j] = null;
//			}
//		}
//		returnRecipe = new CustomRecipe(isInput, recipe.getRecipeOutput(), false);
//
//		return returnRecipe;
//	}
//	
//	private CustomRecipe recipe(ShapelessRecipes recipe) {
//		CustomRecipe returnRecipe;
//
//		List<ItemStack> input = recipe.recipeItems;
//		int size = (input.size()>4)?3:2;
//		ItemStack[][] isInput = new ItemStack[size][size];
//
//		for (int i=0; i<size; i++) {
//			for (int j=0; j<size; j++) {
//				int k = i*size + j;
//				if (k < input.size()) {
//					isInput[i][j] = input.get(k);
//				} else
//					isInput[i][j] = null;
//			}
//		}
//		returnRecipe = new CustomRecipe(isInput, recipe.getRecipeOutput(), true);
//
//		return returnRecipe;
//	}
//	
////	private CustomRecipe recipe(RecipeFireworks recipe) {
////		CustomRecipe returnRecipe;
////		
////		List<ItemStack> input = recipe.
////		
////		return returnRecipe;
////	}
//
	public List<IDisplayRecipe> getRecipesWithInput(ItemStack in) {
		if (in.isItemStackDamageable()) in = new ItemStack(in.getItem());
		List<IDisplayRecipe> returnList = new ArrayList();
		
		for (IDisplayRecipe recipe : recipeList) {
			if (recipe.contains(in))
				returnList.add(recipe);
		}
		
		returnList.addAll(getAllRecipesFor(in));
		
		return returnList;
	}

	public List<IDisplayRecipe> getRecipesWithOutput(ItemStack out) {
		if (out.isItemStackDamageable()) out = new ItemStack(out.getItem());
		List<IDisplayRecipe> returnList = new ArrayList();

		for (IDisplayRecipe recipe : recipeList) {
			if (recipe.yields(out))
				returnList.add(recipe);
		}
		
		return returnList;
	}
	
	public List<IDisplayRecipe> getAllRecipesFor(ItemStack machine) {
		List<IDisplayRecipe> returnList = new ArrayList();
		
		for (IDisplayRecipe recipe : recipeList) {
			if (ItemStack.areItemStacksEqual(recipe.tabIcon(), machine))
				returnList.add(recipe);
		}
		
		return returnList;
	}
//
//	public static class CustomRecipe extends GuiScreen implements IDisplayRecipe {
//		ArrayList<ItemStack>[][] inputL = null;
//		ArrayList<ItemStack> outputL = null;
//		ItemStack[][] inputC = null;
//		ItemStack inputS = null;
//		ItemStack output;
//		String type;
//		boolean shapeless = false;
//		
//		public CustomRecipe(ArrayList<ItemStack>[][] in, ItemStack out, boolean shapeless) {
//			this.inputL = in;
//			this.output = out;
//			this.shapeless = shapeless;
//			this.type = CRAFTING;
//			this.mc = Minecraft.getMinecraft();
//			this.fontRendererObj = this.mc.fontRenderer;
//		}
//		public CustomRecipe(ItemStack[][] in, ItemStack out, boolean shapeless) {
//			this.inputC = in;
//			this.output = out;
//			this.type = CRAFTING;
//			this.shapeless = shapeless;
//			this.mc = Minecraft.getMinecraft();
//			this.fontRendererObj = this.mc.fontRenderer;
//		}
//		
//		public CustomRecipe(ItemStack in, ItemStack out) {
//			this.inputS = in;
//			this.output = out;
//			this.type = SMELTING;
//			this.mc = Minecraft.getMinecraft();
//			this.fontRendererObj = this.mc.fontRenderer;
//		}
//		
//		public String type() { return this.type; }
//		public boolean shapeless() { return this.shapeless; }
//		public Object output() { return this.output; }
//		public Object input() {
//			if (type == CRAFTING) return inputC;
//			if (type == SMELTING) return inputS;
//			return null;
//		}
//		
//		public boolean contains(ItemStack in) {
//			if (in == null) return false;
//			if (type == CRAFTING && inputC != null) {
//				for (int i=0; i<inputC.length; i++)
//					for (int j=0; j<inputC[i].length; j++) {
////						System.out.println("(" + inputC.length + ", " + inputC[i].length + ")" + (inputC[i][j]!=null?inputC[i][j].getDisplayName():"null"));
//						if (inputC[i][j] != null) {
//							// For some reason, damage values on some itemstacks is 32767 instead of zero. I don't know if this is
//							// an error on my side or Forge or what, but this line corrects that if encountered
//							if (inputC[i][j].getItemDamage() == Short.MAX_VALUE) inputC[i][j].setItemDamage(0);
////							if (inputC[i][j].getItem().equals(in.getItem()) && (!in.getHasSubtypes() || inputC[i][j].getItemDamage() == in.getItemDamage())) {// && ItemStack.areItemStackTagsEqual(inputC[i][j], in))
//							if (inputC[i][j].isItemEqual(in)) {
//								return true; // Not using ItemStack.areItemStacksEqual() because I don't want to check stack size
//							}
//						}
//					}
//			}
//			if (type == SMELTING && inputS != null) {
//				if (inputS.getItemDamage() == Short.MAX_VALUE) inputS.setItemDamage(0);
//				if (inputS.isItemEqual(in))// && ItemStack.areItemStackTagsEqual(inputS, in))
//					return true;
//			}
//			return false;
//		}
//		
//		public boolean yields(ItemStack out) {
//			if (!output.isItemEqual(out)) return false;
////			if (output.getHasSubtypes() && output.getItemDamage() != out.getItemDamage()) return false;
//			if (!ItemStack.areItemStackTagsEqual(output, out)) return false;
//			return true;
//		}
//		
//		public boolean isShapeless() {
//			return shapeless;
//		}
//		
//		public String toString() {
//			String returnString = "";
//
//			if (type == CRAFTING) {
//				returnString += "Crafting Recipe:";
//				if (shapeless) returnString += " (Shapeless)";
//				for (int i=0; i<inputC.length; i++) {
//					returnString += "\n";
//					if (i != 0) { for (int k = 0; k<(inputC.length*31); k++) returnString += "-"; returnString += "\n"; }
//					for (int j=0; j<inputC[i].length; j++) {
//						if (j != 0) returnString += "|";
//						String name = (inputC[i][j] != null)? inputC[i][j].getDisplayName() : "";
//
//						for (int k=0; k<Math.floor((30.0D-name.length())/2); k++) returnString += " ";
//						returnString += name;
//						for (int k=0; k<Math.ceil((30.0D-name.length())/2); k++) returnString += " ";
//					}
//				}
//			}
//			if (type == SMELTING) {
//				returnString += "Smelting Recipe:\n";
//				if (inputS != null)
//					returnString += inputS.getDisplayName();
//			}
//			
//			if (output != null) {
//				returnString += " ==> ";
//				if (output.stackSize > 1) returnString += output.stackSize + "x ";
//				returnString += output.getDisplayName();
//			}
//			
//			return returnString;
//		}
//		
//		/*
//		 * Methods used by GuiRecipeCrafting
//		 */
//		int xPos, yPos, page;
//		ItemSlot[][] inputSlotC;
//		ItemSlot inputSlotS;
//		ItemSlot outputSlot;
//		String title;
//		public String title() { return this.title; }
//		public int page() { return this.page; }
//		public void setVars(Minecraft mc, int x, int y, int index) {
//			this.mc = mc;
//			int slot = 0;
//			this.xPos = x;
//			this.yPos = y;
//			this.page = index/2;
//			if (type == CRAFTING) {
//				this.xPos += 29;
//				this.yPos += 20 + (index%2)*70;
//				title = I18n.format("container.crafting", new Object[0]) + (shapeless?" (Shapeless)":"");
//				boolean flag = (inputL == null);
//				int ix = (flag ? inputC.length : inputL.length);
//				int iy = (flag ? inputC[0].length : inputL[0].length);
//				this.inputSlotC = new ItemSlot[ix][iy];
//				for (int i=0; i<ix; i++) {
//					for (int j=0; j<iy; j++) {
//						inputSlotC[i][j] = new ItemSlot(slot++, inputC[i][j], xPos+2+j*18,yPos+2+i*18);
//					}
//				}
//				this.outputSlot = new ItemSlot(slot++, output, xPos+96,yPos+20);
//			}
//			if (type == SMELTING) {
//				this.xPos += 29;
//				this.yPos += 20 + (index%2)*70;
//				title = I18n.format("container.furnace", new Object[0]);
//				this.inputSlotS = new ItemSlot(slot++, inputS, xPos+28,yPos+2);
//				this.outputSlot = new ItemSlot(slot++, output, xPos+88,yPos+20);
//			}
//			initGui();
//		}
//		
//		public void initGui() {
////			System.out.println("(" + width + ", " + height + ", " + xPos + ", " + yPos + ")");
////			ScaledResolution scaledresolution = new ScaledResolution(mc.gameSettings, mc.displayWidth, mc.displayHeight);
////	        this.width  = scaledresolution.getScaledWidth();
////	        this.height = scaledresolution.getScaledHeight();
//		}
//
//		public ItemSlot draw(GuiContainer gui, int mouseX, int mouseY) {
////			String title = "";
////			if (type == CRAFTING) title = I18n.format("container.crafting", new Object[0]) + (shapeless?" (Shapeless)":"");
////			if (type == SMELTING) title = I18n.format("container.furnace", new Object[0]);
//
//
//	        ItemSlot theSlot = null;
//	        if (type == CRAFTING) {
//				this.mc.renderEngine.bindTexture(new ResourceLocation("textures/gui/container/crafting_table.png")); 
//				this.drawTexturedModalRect(xPos, yPos, 28,15, 117,56);
//		        for (int i=0; i<inputSlotC.length; i++) {
//					for (int j=0; j<inputSlotC[i].length; j++) {
//						ItemSlot slot = inputSlotC[i][j];
//						ItemStack is = slot.displayItem;
//						if ( mouseX >= slot.xPos && mouseX <= slot.xPos+16 && mouseY >= slot.yPos && mouseY <= slot.yPos+16 ) {
//							theSlot = slot;
//							drawGradientRect(slot.xPos, slot.yPos, slot.xPos+16, slot.yPos+16, 0x66FFFFFF, 0x66FFFFFF);
//						}
//						if (is != null) drawItemStack(is, slot.xPos, slot.yPos, "");
//					}
//					if (shapeless) {
//						String title = "(Shapeless)";
//						int w = fontRendererObj.getStringWidth(title);
//				        fontRendererObj.drawString(title, xPos+(117-w)/2+30, yPos+45, 0x404040);
//					}
//				}
//	        } else if (type == SMELTING) {
//				this.mc.renderEngine.bindTexture(new ResourceLocation("textures/gui/container/furnace.png")); 
//				this.drawTexturedModalRect(xPos, yPos, 28,15, 117,56);
//				this.drawTexturedModalRect(inputSlotS.xPos+1,inputSlotS.yPos+20, 176,0, 15, 15);
//				ItemStack is = inputSlotS.displayItem;
//				if ( mouseX >= inputSlotS.xPos && mouseX <= inputSlotS.xPos+16 && mouseY >= inputSlotS.yPos && mouseY <= inputSlotS.yPos+16 ) {
//					theSlot = inputSlotS;
//					this.drawGradientRect(inputSlotS.xPos, inputSlotS.yPos, inputSlotS.xPos+16, inputSlotS.yPos+16, 0x66FFFFFF, 0x66FFFFFF);
//				}
//				String size = is.stackSize>1 ? is.stackSize+"" : "";
//				if (is != null) drawItemStack(is, inputSlotS.xPos, inputSlotS.yPos, size);
////				drawItemStack(new ItemStack(Items.coal), inputSlotS.xPos, inputSlotS.yPos+36, "");
//	        }
//	        
//			ItemStack is = outputSlot.displayItem;
//			if ( mouseX >= outputSlot.xPos && mouseX <= outputSlot.xPos+16 && mouseY >= outputSlot.yPos && mouseY <= outputSlot.yPos+16 ) {
//				theSlot = outputSlot;
//				this.drawGradientRect(outputSlot.xPos, outputSlot.yPos, outputSlot.xPos+16, outputSlot.yPos+16, 0x66FFFFFF, 0x66FFFFFF);
//			}
//			String size = is.stackSize>1 ? is.stackSize+"" : "";
//			if (is != null) drawItemStack(is, outputSlot.xPos, outputSlot.yPos, size);
//
//			return theSlot;
//		}
//
//		public void drawItemStack(ItemStack itemstack, int xPos, int yPos, String par4) {
//	        FontRenderer font = null;
//	        if (itemstack != null) font = itemstack.getItem().getFontRenderer(itemstack);
//	        if (font == null) font = fontRendererObj;
//	        itemRender.renderItemAndEffectIntoGUI(font, mc.getTextureManager(), itemstack, xPos, yPos);
//	        itemRender.renderItemOverlayIntoGUI(font, mc.getTextureManager(), itemstack, xPos, yPos, par4);
//	    }
//	}
}
